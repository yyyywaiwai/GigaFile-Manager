name: Build GigaFile Manager & CLI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            executable_ext: .exe
            artifact_name: gigafile-manager-windows-x64
            cli_artifact_name: gigafile-cli-windows-x64
            cli_portable_name: gigafile-portable-windows-x64
          - os: macos-latest
            platform: macos
            arch: arm64
            executable_ext: .app
            artifact_name: gigafile-manager-macos-arm64
            cli_artifact_name: gigafile-cli-macos-arm64
            cli_portable_name: gigafile-portable-macos-arm64
          - os: macos-13
            platform: macos
            arch: x64
            executable_ext: .app
            artifact_name: gigafile-manager-macos-intel
            cli_artifact_name: gigafile-cli-macos-intel
            cli_portable_name: gigafile-portable-macos-intel
          - os: ubuntu-latest
            platform: linux
            arch: x64
            executable_ext: ""
            artifact_name: gigafile-manager-linux-x64
            cli_artifact_name: gigafile-cli-linux-x64
            cli_portable_name: gigafile-portable-linux-x64

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller Pillow imageio

    - name: Build GUI with Nuitka (Windows)
      if: matrix.platform == 'windows'
      run: |
        Remove-Item -Path build-nuitka-gui, dist-nuitka-gui -Recurse -Force -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Force -Path build-nuitka-gui, dist-nuitka-gui
        
        python -m nuitka `
          --standalone `
          --windows-console-mode=disable `
          --windows-icon-from-ico=icon.ico `
          --enable-plugin=tk-inter `
          --output-dir=dist-nuitka-gui `
          --output-filename="GigaFile Manager" `
          --include-package=tkinter `
          --include-package=requests `
          --include-package=urllib3 `
          --include-package=bs4 `
          --include-package=requests_toolbelt `
          --include-package=tqdm `
          --nofollow-import-to=torch `
          --nofollow-import-to=torchvision `
          --nofollow-import-to=transformers `
          --nofollow-import-to=cv2 `
          --nofollow-import-to=opencv-python `
          --nofollow-import-to=matplotlib `
          --nofollow-import-to=pandas `
          --nofollow-import-to=numpy `
          --nofollow-import-to=scipy `
          --nofollow-import-to=sklearn `
          --nofollow-import-to=tensorflow `
          --nofollow-import-to=PyQt5 `
          --nofollow-import-to=PyQt6 `
          --nofollow-import-to=wx `
          --nofollow-import-to=kivy `
          --remove-output `
          --assume-yes-for-downloads `
          gigafiledl.py

    - name: Build CLI with Nuitka (Windows)
      if: matrix.platform == 'windows'
      run: |
        Remove-Item -Path build-nuitka-cli, dist-nuitka-cli -Recurse -Force -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Force -Path build-nuitka-cli, dist-nuitka-cli
        
        # スタンドアロン版ビルド
        python -m nuitka `
          --standalone `
          --output-dir=dist-nuitka-cli `
          --output-filename=gigafile `
          --include-package=requests `
          --include-package=urllib3 `
          --include-package=bs4 `
          --include-package=requests_toolbelt `
          --include-package=tqdm `
          --nofollow-import-to=tkinter `
          --nofollow-import-to=torch `
          --nofollow-import-to=transformers `
          --nofollow-import-to=matplotlib `
          --nofollow-import-to=pandas `
          --nofollow-import-to=numpy `
          --nofollow-import-to=scipy `
          --nofollow-import-to=sklearn `
          --nofollow-import-to=tensorflow `
          --nofollow-import-to=PyQt5 `
          --nofollow-import-to=PyQt6 `
          --nofollow-import-to=wx `
          --nofollow-import-to=kivy `
          --remove-output `
          --assume-yes-for-downloads `
          gigafilecli.py
        
        # スタンドアロン版を保護
        New-Item -ItemType Directory -Force -Path "dist-nuitka-cli/standalone-final"
        Copy-Item -Recurse "dist-nuitka-cli/gigafilecli.dist" "dist-nuitka-cli/standalone-final/"
        
        # ポータブル版ビルド
        python -m nuitka `
          --onefile `
          --output-dir=dist-nuitka-cli `
          --output-filename=gigafile-portable `
          --include-package=requests `
          --include-package=urllib3 `
          --include-package=bs4 `
          --include-package=requests_toolbelt `
          --include-package=tqdm `
          --nofollow-import-to=tkinter `
          --nofollow-import-to=torch `
          --nofollow-import-to=transformers `
          --nofollow-import-to=matplotlib `
          --nofollow-import-to=pandas `
          --nofollow-import-to=numpy `
          --nofollow-import-to=scipy `
          --nofollow-import-to=sklearn `
          --nofollow-import-to=tensorflow `
          --nofollow-import-to=PyQt5 `
          --nofollow-import-to=PyQt6 `
          --nofollow-import-to=wx `
          --nofollow-import-to=kivy `
          --remove-output `
          --assume-yes-for-downloads `
          gigafilecli.py

    - name: Build GUI with Nuitka (macOS)
      if: matrix.platform == 'macos'
      run: |
        rm -rf build-nuitka-gui dist-nuitka-gui
        mkdir -p build-nuitka-gui dist-nuitka-gui
        
        python3 -m nuitka \
          --standalone \
          --macos-create-app-bundle \
          --macos-app-icon=icon.ico \
          --enable-plugin=tk-inter \
          --output-dir=dist-nuitka-gui \
          --output-filename="GigaFile Manager" \
          --include-package=tkinter \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=bs4 \
          --include-package=requests_toolbelt \
          --include-package=tqdm \
          --nofollow-import-to=torch \
          --nofollow-import-to=torchvision \
          --nofollow-import-to=transformers \
          --nofollow-import-to=cv2 \
          --nofollow-import-to=opencv-python \
          --nofollow-import-to=matplotlib \
          --nofollow-import-to=pandas \
          --nofollow-import-to=numpy \
          --nofollow-import-to=scipy \
          --nofollow-import-to=sklearn \
          --nofollow-import-to=tensorflow \
          --nofollow-import-to=PyQt5 \
          --nofollow-import-to=PyQt6 \
          --nofollow-import-to=wx \
          --nofollow-import-to=kivy \
          --remove-output \
          --assume-yes-for-downloads \
          gigafiledl.py

    - name: Build GUI with Nuitka (Linux)
      if: matrix.platform == 'linux'
      run: |
        rm -rf build-nuitka-gui dist-nuitka-gui
        mkdir -p build-nuitka-gui dist-nuitka-gui
        
        python3 -m nuitka \
          --standalone \
          --enable-plugin=tk-inter \
          --output-dir=dist-nuitka-gui \
          --output-filename="GigaFile Manager" \
          --include-package=tkinter \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=bs4 \
          --include-package=requests_toolbelt \
          --include-package=tqdm \
          --nofollow-import-to=torch \
          --nofollow-import-to=torchvision \
          --nofollow-import-to=transformers \
          --nofollow-import-to=cv2 \
          --nofollow-import-to=opencv-python \
          --nofollow-import-to=matplotlib \
          --nofollow-import-to=pandas \
          --nofollow-import-to=numpy \
          --nofollow-import-to=scipy \
          --nofollow-import-to=sklearn \
          --nofollow-import-to=tensorflow \
          --nofollow-import-to=PyQt5 \
          --nofollow-import-to=PyQt6 \
          --nofollow-import-to=wx \
          --nofollow-import-to=kivy \
          --remove-output \
          --assume-yes-for-downloads \
          gigafiledl.py

    - name: Build CLI with Nuitka (macOS)
      if: matrix.platform == 'macos'
      run: |
        rm -rf build-nuitka-cli dist-nuitka-cli
        mkdir -p build-nuitka-cli dist-nuitka-cli
        
        # スタンドアロン版ビルド
        python3 -m nuitka \
          --standalone \
          --output-dir=dist-nuitka-cli \
          --output-filename=gigafile \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=bs4 \
          --include-package=requests_toolbelt \
          --include-package=tqdm \
          --nofollow-import-to=tkinter \
          --nofollow-import-to=torch \
          --nofollow-import-to=transformers \
          --nofollow-import-to=matplotlib \
          --nofollow-import-to=pandas \
          --nofollow-import-to=numpy \
          --nofollow-import-to=scipy \
          --nofollow-import-to=sklearn \
          --nofollow-import-to=tensorflow \
          --nofollow-import-to=PyQt5 \
          --nofollow-import-to=PyQt6 \
          --nofollow-import-to=wx \
          --nofollow-import-to=kivy \
          --remove-output \
          --assume-yes-for-downloads \
          gigafilecli.py
        
        # スタンドアロン版を保護
        mkdir -p dist-nuitka-cli/standalone-final
        cp -r dist-nuitka-cli/gigafilecli.dist dist-nuitka-cli/standalone-final/
        
        # ポータブル版ビルド
        python3 -m nuitka \
          --onefile \
          --output-dir=dist-nuitka-cli \
          --output-filename=gigafile-portable \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=bs4 \
          --include-package=requests_toolbelt \
          --include-package=tqdm \
          --nofollow-import-to=tkinter \
          --nofollow-import-to=torch \
          --nofollow-import-to=transformers \
          --nofollow-import-to=matplotlib \
          --nofollow-import-to=pandas \
          --nofollow-import-to=numpy \
          --nofollow-import-to=scipy \
          --nofollow-import-to=sklearn \
          --nofollow-import-to=tensorflow \
          --nofollow-import-to=PyQt5 \
          --nofollow-import-to=PyQt6 \
          --nofollow-import-to=wx \
          --nofollow-import-to=kivy \
          --remove-output \
          --assume-yes-for-downloads \
          gigafilecli.py

    - name: Build CLI with Nuitka (Linux)
      if: matrix.platform == 'linux'
      run: |
        rm -rf build-nuitka-cli dist-nuitka-cli
        mkdir -p build-nuitka-cli dist-nuitka-cli
        
        # スタンドアロン版ビルド
        python3 -m nuitka \
          --standalone \
          --output-dir=dist-nuitka-cli \
          --output-filename=gigafile \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=bs4 \
          --include-package=requests_toolbelt \
          --include-package=tqdm \
          --nofollow-import-to=tkinter \
          --nofollow-import-to=torch \
          --nofollow-import-to=transformers \
          --nofollow-import-to=matplotlib \
          --nofollow-import-to=pandas \
          --nofollow-import-to=numpy \
          --nofollow-import-to=scipy \
          --nofollow-import-to=sklearn \
          --nofollow-import-to=tensorflow \
          --nofollow-import-to=PyQt5 \
          --nofollow-import-to=PyQt6 \
          --nofollow-import-to=wx \
          --nofollow-import-to=kivy \
          --remove-output \
          --assume-yes-for-downloads \
          gigafilecli.py
        
        # スタンドアロン版を保護
        mkdir -p dist-nuitka-cli/standalone-final
        cp -r dist-nuitka-cli/gigafilecli.dist dist-nuitka-cli/standalone-final/
        
        # ポータブル版ビルド
        python3 -m nuitka \
          --onefile \
          --output-dir=dist-nuitka-cli \
          --output-filename=gigafile-portable \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=bs4 \
          --include-package=requests_toolbelt \
          --include-package=tqdm \
          --nofollow-import-to=tkinter \
          --nofollow-import-to=torch \
          --nofollow-import-to=transformers \
          --nofollow-import-to=matplotlib \
          --nofollow-import-to=pandas \
          --nofollow-import-to=numpy \
          --nofollow-import-to=scipy \
          --nofollow-import-to=sklearn \
          --nofollow-import-to=tensorflow \
          --nofollow-import-to=PyQt5 \
          --nofollow-import-to=PyQt6 \
          --nofollow-import-to=wx \
          --nofollow-import-to=kivy \
          --remove-output \
          --assume-yes-for-downloads \
          gigafilecli.py

    - name: Check GUI build result (Windows)
      if: matrix.platform == 'windows'
      run: |
        if (Test-Path "dist-nuitka-gui/GigaFile Manager.dist") {
          Write-Host "GUI Build successful! Application created at: dist-nuitka-gui/GigaFile Manager.dist"
          Get-ChildItem "dist-nuitka-gui/GigaFile Manager.dist" -Recurse | Measure-Object -Property Length -Sum | ForEach-Object { "Total size: {0:N2} MB" -f ($_.Sum / 1MB) }
        } else {
          Write-Host "GUI Build failed. Directory not found."
          exit 1
        }

    - name: Check CLI build result (Windows)
      if: matrix.platform == 'windows'
      run: |
        if (Test-Path "dist-nuitka-cli/gigafile-portable.exe") {
          Write-Host "CLI Portable Build successful! Application created at: dist-nuitka-cli/gigafile-portable.exe"
          Get-Item "dist-nuitka-cli/gigafile-portable.exe" | ForEach-Object { "Portable Size: {0:N2} MB" -f ($_.Length / 1MB) }
        } else {
          Write-Host "CLI Portable Build failed. File not found."
          exit 1
        }
        if (Test-Path "dist-nuitka-cli/standalone-final/gigafilecli.dist") {
          Write-Host "CLI Standalone Build successful! Application created at: dist-nuitka-cli/standalone-final/gigafilecli.dist/"
          Get-ChildItem "dist-nuitka-cli/standalone-final/gigafilecli.dist" -Recurse | Measure-Object -Property Length -Sum | ForEach-Object { "Standalone Size: {0:N2} MB" -f ($_.Sum / 1MB) }
        } else {
          Write-Host "CLI Standalone Build failed. Directory not found."
          exit 1
        }

    - name: Check GUI build result (macOS)
      if: matrix.platform == 'macos'
      run: |
        if [ -d "dist-nuitka-gui/GigaFile Manager.app" ]; then
          echo "GUI Build successful! Application created at: dist-nuitka-gui/GigaFile Manager.app"
          du -sh "dist-nuitka-gui/GigaFile Manager.app"
        else
          echo "GUI Build failed. Check the output above for errors."
          exit 1
        fi

    - name: Check CLI build result (macOS)
      if: matrix.platform == 'macos'
      run: |
        if [ -f "dist-nuitka-cli/gigafile-portable" ]; then
          echo "CLI Portable Build successful! Application created at: dist-nuitka-cli/gigafile-portable"
          ls -lh dist-nuitka-cli/gigafile-portable
        else
          echo "CLI Portable Build failed. Check the output above for errors."
          exit 1
        fi
        if [ -d "dist-nuitka-cli/standalone-final/gigafilecli.dist" ]; then
          echo "CLI Standalone Build successful! Application created at: dist-nuitka-cli/standalone-final/gigafilecli.dist/"
          du -sh dist-nuitka-cli/standalone-final/gigafilecli.dist
        else
          echo "CLI Standalone Build failed. Check the output above for errors."
          exit 1
        fi

    - name: Check GUI build result (Linux)
      if: matrix.platform == 'linux'
      run: |
        if [ -d "dist-nuitka-gui/GigaFile Manager.dist" ]; then
          echo "GUI Build successful! Application created at: dist-nuitka-gui/GigaFile Manager.dist"
          du -sh "dist-nuitka-gui/GigaFile Manager.dist"
        else
          echo "GUI Build failed. Check the output above for errors."
          exit 1
        fi

    - name: Check CLI build result (Linux)
      if: matrix.platform == 'linux'
      run: |
        if [ -f "dist-nuitka-cli/gigafile-portable" ]; then
          echo "CLI Portable Build successful! Application created at: dist-nuitka-cli/gigafile-portable"
          ls -lh dist-nuitka-cli/gigafile-portable
        else
          echo "CLI Portable Build failed. Check the output above for errors."
          exit 1
        fi
        if [ -d "dist-nuitka-cli/standalone-final/gigafilecli.dist" ]; then
          echo "CLI Standalone Build successful! Application created at: dist-nuitka-cli/standalone-final/gigafilecli.dist/"
          du -sh dist-nuitka-cli/standalone-final/gigafilecli.dist
        else
          echo "CLI Standalone Build failed. Check the output above for errors."
          exit 1
        fi

    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        Compress-Archive -Path "dist-nuitka-gui/GigaFile Manager.dist" -DestinationPath "${{ matrix.artifact_name }}.zip"
        Copy-Item "dist-nuitka-cli/gigafile-portable.exe" -Destination "${{ matrix.cli_portable_name }}.exe"
        Compress-Archive -Path "dist-nuitka-cli/standalone-final/gigafilecli.dist" -DestinationPath "${{ matrix.cli_artifact_name }}.zip"

    - name: Create archive (macOS)
      if: matrix.platform == 'macos'
      run: |
        cd dist-nuitka-gui
        zip -r "../${{ matrix.artifact_name }}.zip" "GigaFile Manager.app"
        cd ..
        cp "dist-nuitka-cli/gigafile-portable" "${{ matrix.cli_portable_name }}"
        cd dist-nuitka-cli/standalone-final
        zip -r "../../${{ matrix.cli_artifact_name }}.zip" "gigafilecli.dist"
        cd ../..

    - name: Create archive (Linux)
      if: matrix.platform == 'linux'
      run: |
        cd dist-nuitka-gui
        tar -czf "../${{ matrix.artifact_name }}.tar.gz" "GigaFile Manager.dist"
        cd ..
        cp "dist-nuitka-cli/gigafile-portable" "${{ matrix.cli_portable_name }}"
        cd dist-nuitka-cli/standalone-final
        tar -czf "../../${{ matrix.cli_artifact_name }}.tar.gz" "gigafilecli.dist"
        cd ../..

    - name: Upload Windows artifact
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.zip
        retention-days: 30

    - name: Upload Windows CLI Portable artifact
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.cli_portable_name }}
        path: ${{ matrix.cli_portable_name }}.exe
        retention-days: 30

    - name: Upload Windows CLI Onedir artifact
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.cli_artifact_name }}
        path: ${{ matrix.cli_artifact_name }}.zip
        retention-days: 30

    - name: Upload macOS artifact
      if: matrix.platform == 'macos'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.zip
        retention-days: 30

    - name: Upload macOS CLI Portable artifact
      if: matrix.platform == 'macos'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.cli_portable_name }}
        path: ${{ matrix.cli_portable_name }}
        retention-days: 30

    - name: Upload macOS CLI Onedir artifact
      if: matrix.platform == 'macos'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.cli_artifact_name }}
        path: ${{ matrix.cli_artifact_name }}.zip
        retention-days: 30

    - name: Upload Linux artifact
      if: matrix.platform == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.tar.gz
        retention-days: 30

    - name: Upload Linux CLI Portable artifact
      if: matrix.platform == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.cli_portable_name }}
        path: ${{ matrix.cli_portable_name }}
        retention-days: 30

    - name: Upload Linux CLI Onedir artifact
      if: matrix.platform == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.cli_artifact_name }}
        path: ${{ matrix.cli_artifact_name }}.tar.gz
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          gigafile-manager-windows-x64/*.zip
          gigafile-manager-macos-arm64/*.zip
          gigafile-manager-macos-intel/*.zip
          gigafile-manager-linux-x64/*.tar.gz
          gigafile-portable-windows-x64/*.exe
          gigafile-portable-macos-arm64/gigafile-portable-macos-arm64
          gigafile-portable-macos-intel/gigafile-portable-macos-intel
          gigafile-portable-linux-x64/gigafile-portable-linux-x64
          gigafile-cli-windows-x64/*.zip
          gigafile-cli-macos-arm64/*.zip
          gigafile-cli-macos-intel/*.zip
          gigafile-cli-linux-x64/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
